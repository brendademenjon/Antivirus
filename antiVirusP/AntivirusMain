package antiVirusP;
import java.io.Console;
import java.io.File;
import java.io.FilenameFilter;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;



public class AntivirusMain {
	
	
	
	//Criando um vetor que vai conter todos os arquivos que forem encontrados
	static File[] AE = new File[4];
	//Criando uma variavel que vai conter qual celula do vetor está vazia
	static int indiceVazio = 0;
	
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner scan = new Scanner(System.in);
		
		//Criando um vetor com todos os arquivos do usuario. Função que pega o nome do usuario
		File[] pastas = (new File("C:\\Users\\" + System.getProperty("user.name"))).listFiles();
		
		//Criando um vetor para conter todos os arquivos encontrados 
		File[] armazenamentoTemporario = {};
		
		
		
		//Criando um Loop que vai percorrer todos os arquivos do usuario
		for (File diretorio : pastas) {
			
			//Verificando se é um Diretório 
			if(diretorio.isDirectory()) {
				
				
				//chamando a função que procura pelos arquivos e guardando temporariamente em um vetor
				armazenamentoTemporario = buscarArquivos(diretorio);
				//salvando os arquivos encontrados no vetor AE
				salvandoArquivosEncontrados(armazenamentoTemporario);
				
				
				
				//Criando um vetor com todos os arquivos que estão dentro do diretório 
				File[] SubDiretorios = (new File(diretorio.toString())).listFiles();
				
				// Verificando se há arquivos ou eles são nulos
				if(SubDiretorios != null) {
					//Criando um loop para percorrer todas as pastas do subdiretorio
					for (File subdiretorio : SubDiretorios) {
						
						//Verificando se é um diretorio  
						if(subdiretorio.isDirectory()) {
							//chamando a função que procura pelos arquivos e guardando temporariamente em um vetor
								armazenamentoTemporario = buscarArquivos(subdiretorio);
							//salvando os arquivos encontrados no vetor AE
								salvandoArquivosEncontrados(armazenamentoTemporario);
						
						}
						
						
			        }
				}
				
				
			}
			
		}
		
		//Criando um looping para poder escrever em console todos os arquivos encontrados
		for(int i = 0; i < AntivirusMain.getIndiceVazio(); i++) {
			//Nome do Arquivo em String, um vetor utilizado para o nome do arquivo
			String[] NAS = (AE[i].toString()).split("\\\\"); 
			System.out.println("Arquivo encontrado: " + NAS[NAS.length-1]);
			System.out.println("O local alocado: ");
			System.out.println(AE[i]);
			System.out.println();
		}
		
		
		String r = "";
		
		if(indiceVazio == 4) {
			System.out.println("Todos os vírus foram localizados!");
		} else if(indiceVazio >= 1){
			System.out.println("Não foram localizados todos os vírus!");
		} else {
			System.out.println("Nem um vírus foi localizado!");
			r = "n";
		}
		
		
		
		
		
		while(!r.equals("s") && !r.equals("n")) {
			
		System.out.println();
		
		System.out.println("Deseja deletar algum arquivo? s/n");
		System.out.println();
		
		
		System.out.println("Digite 's' para sim ");
		System.out.println("ou 'n' para não");
		
		r = scan.nextLine();
		
		int a = 0;
		
		
		switch(r){
			case "s":  
					while(a < 1 || a > 5) {
							System.out.println();
							System.out.println("Digite o número correspondente a opção que deseja deletar");
							System.out.println();
							
							for(int i = 0; i < 4; i++ ) {
								if(AE[i] != null) {
									System.out.println((i+1) + " - " + AE[i]);
								}
							}
							
							System.out.println("5 - Deletar todos");
							
								a = scan.nextInt();
							
							
						}//while
						
						if(a != 5) {
							if(AE[a-1] != null) {
									AE[a-1].delete();
									System.out.println(AE[a-1]);
									System.out.println("Foi deletado com sucesso!");
							}
						} else if(a == 5) {
								for(int i = 0; i < 4; i++) {
									if(AE[i] != null) {
											AE[i].delete();
											System.out.println(AE[i]);
											System.out.println("Foi deletado com sucesso!");
											
									}
									
								}
							
						}
						
			break;
			
			
			case "n":	//System.out.println("Programa encerrado");
				break;
			
			default:		System.out.println("Insira uma resposta valida");
				break;
		
		}
		
		}//while
		
		System.out.println("Programa encerrado");
		
	}


	
	
	
public static int getIndiceVazio() {
		return indiceVazio;
	}
	public static void setIndiceVazio(int indiceVazio) {
		AntivirusMain.indiceVazio = indiceVazio;
	}





public static File[] getAE() {
		return AE;
	}
public static File getAEArquivo(int i) {
		return AE[i];
	}
	public static void setAE(File aE, int i) {
		AE[i] = aE;
	}







//Criando um método que procura pelos arquivos que queremos para evitar redundancia 
public static File[] buscarArquivos(File diretorio) {
	//Criando um Vetor com o nome dos arquivos que estamos procurando
	String arquivos[] = new String[]{"execucao-aula.exe", "execucao-aula-teste.exe", "script-aula.bat", "script-aula-teste.bat"};
	
	
	File[] arquivosEncontrados = new File[4];
	
	//Criando um loop para procurar pelos quatros arquivos que procuramos
	for(int i = 0; i < 4; i++) {
		//Criando um arquivo com o nome daquele que procuramos
		File arquivo = new File(diretorio + "\\" + arquivos[i]);
		
		
		//verificamos se ele existe
		boolean existe = arquivo.exists();
		
		if(existe) {
			arquivosEncontrados[i] = arquivo;	
		} 
		
		
		
	}
	
	
		return arquivosEncontrados;
	
		
	
}


public static void salvandoArquivosEncontrados(File[] ArEn) {
	
	
	if(ArEn != null) {
		for(File AE : ArEn) {
			
			if(AE != null) {
				
				//Guardando o arquivo no vetor AE em seu espaço vazio utilizando o indiceVazio
				AntivirusMain.setAE(AE, AntivirusMain.getIndiceVazio());
				
				//setando o novo indice que está vazio 
				AntivirusMain.setIndiceVazio(getIndiceVazio() + 1);
			}
			
		}
	}
	
}





}
